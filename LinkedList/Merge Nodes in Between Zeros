You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.


CODE:-
ListNode* mergeNodes(ListNode* head) {
    
     ListNode* temp=head;
         ListNode* curr=head->next;
     // ListNode *k=temp;
     int sum=0;
     while(curr!=NULL){
         if(curr->val==0){
             temp->val=sum;
             if(curr->next!=NULL){
             temp=temp->next;
             }
             sum=0;
         }
         else{
             sum=sum+curr->val;
         }
         curr=curr->next;
     }
        cout<<temp->val;
        temp->next=NULL;
        return head;
    }
    
    // o(n)
